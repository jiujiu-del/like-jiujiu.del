[{"title":"Centos_Nginx-源码安装","date":"2023-07-07T12:49:04.000Z","url":"/%5Bobject%20Object%5D/Centos-Nginx-%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/","categories":[["undefined",""]],"content":"Nginx - 源码安装 源码包获取方式： 软件官网获取下载：  选择版本，这里选择旧版 1.22.1；右键选择复制链接地址 虚拟机终端使用 wget 下载源码包 生成完成如下 安装完成如图下： 添加系统启动脚本 vim /usr/lib/systemd/system/nginx.service "},{"title":"NodeJs的安装及配置环境变量","date":"2023-07-07T08:40:16.000Z","url":"/%5Bobject%20Object%5D/NodeJs%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/","categories":[["undefined",""]],"content":"NodeJs 的安装及配置环境变量一、Node.js 下载与安装二、Node.js 环境变量配置三、国内镜像网站配置 NodeJs 的安装及配置环境变量 一、Node.js 下载与安装 进入官网地址下载安装包  下载完成后，双击安装包，开始安装，使用默认配置安装一直点 next 即可，安装路径默认在 C:\\Program Files 下，也可以自定义修改 安装路径默认在 C:\\Program Files 下面，也能够自定义修改，而后点击 next 以下图框中所示，我没有选中，而是直接 next 点击 Install，进行安装 点击 finish，完成安装 二、Node.js 环境变量配置 安装完成后，.msi 格式的安装包已经将 node 启动程序添加到系统环境变量 path 中，咱们能够查看系统变量进行验证：在【设置】→【高级系统设置】 选择环境变量：修改 Path 变量 选择系统变量，修改 Path 查看： 既然已经将 node 程序添加到全局系统变量中，打开 CMD 窗口，执行命令 node -v 查看 node 版本，最新版的 node 在安装时同时也安装了 npm, 执行 npm -v 查看 npm 版本 一部分经常使用的命令，以下： npm -v：查看 npm 安装的版本。 npm init：会引导你建立一个 package.json 文件，包括名称、版本、作者等信息。 npm list：查看当前目录下已安装的 node 包。 npm ls：查看当前目录下已安装的 node 包。 npm install moduleNames：安装 Node 模块到本地目录 node_modules 下。 npm install &lt;name&gt; -g：将包安装到全局环境中。 npm install &lt;name&gt; --save：安装的同时，将信息写入 package.json 中，项目路径中若是有 package.json 文件时，直接使用 npm install 方法就能够根据 dependencies 配置安装全部的依赖包，这样代码提交到 git 时，就不用提交 node_modules 这个文件夹了。 npm install &lt;name&gt; --save-dev：安装的同时，将信息写入 package.json 中项目路径中若是有 package.json 文件时，直接使用 npm install 方法就能够根据 devDependencies 配置安装全部的依赖包，这样代码提交到 git 时，就不用提交 node_modules 这个文件夹了。 npm uninstall moudleName：卸载 node 模块。 npm config get registry 查看镜像源 三、国内镜像网站配置 npm 安装模块时都是去国外的镜像下载的，可是有的时候因为网络等缘由致使安装模块失败，好在阿里有团队维护国内镜像 淘宝 NPM 镜像 添加国内镜像源：如果没有梯子的话，可以使用阿里的国内镜像进行加速。 查看是否更换成功 "},{"title":"基础总结","date":"2023-07-07T07:39:03.000Z","url":"/%5Bobject%20Object%5D/%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/","categories":[["undefined",""]],"content":"总结 markdaown 语法 计算机的组成 网络连接的三种定义 桥接模式 NAT 模式 仅主机模式 IP 丶网关丶子网掩码丶 DNS 修改网卡 虚拟机的克隆和快照 快照： 克隆： shell 命令初始 bashshell 的基本特性 终端命令快捷键 历史命令 history alias 别名 命令帮助手册 绝对路径 / 相对路径 系统目录结构 常用目录 /dev 文件管理类 cd 切换目录 mkdir 创建 touch 创建文件 tree 树状结构展开目录 rm 删除 echo cp：复制丶拷贝 mv：移动 / 改名 cat：查看文件内容 拓展：less/more/head/tail # less/more # head/tail 上传 / 下载：rz sz # which/whereis 排序 / 去重：sort /uniq 截取：cut tr：临时替换字符 wc：统计 find 查找 按名字查找 按照文件类型 按照用户查找 按照时间查找 按照大小查找 # find 按照深度查找 find 按照权限查找 find 的动作（了解，并不用） 动作 含义 -print 打印查找到的内容（默认） -ls 以长格式显示的方式打印查找到的内容 -delete 删除查找到的文件（仅能删除空目录） -ok 后面跟自定义 shell 命令（会提示是否操作 -exec 后面跟自定义 shell 命令（标准写法 - exec ; 文件属性 / 权限修改 文件属性 文件类型 查看磁盘空间 /inode/block inode block 软链接 / 硬链接 区别 硬链接 软链接 命令 ln ln -s 对象 只能对文件创建硬链接 普通文件丶目录 是否受源文件影响 否 是 inode 号 相同 不同 跨分区创建 不能 可以 是否影响源文件 是 是 用户 sudo 提权 sudo 将一个普通用户的身份提升至 root 权限 权限的管理 权限的修改： 权限对文件的影响： 权限对目录的影响： 修改文件属主和属组 特殊权限 SetUID setgid 将目录设置为 SGID 后，如果在该目录下创建文件，都将与该目录的所属组保持一致 sticky vim 的三种模式 命令模式 编辑模式 底行模式 底行模式查找 / 替换： 视图模式： 用户管理 用户文件信息释明： 用户 uid 的说明： 0 超级管理员 (拥有最高权限) 1-200 系统用户，由系统分配给系统进程使用 201-999 系统用户，用来运行服务账户，不需要登陆系统 (动态分配) 1000+ 常规普通用户 1）增 2）删： 3）改 4）查： 用户创建配置文件释明： 密码管理设置信息： 组管理信息： 组创建 1）增 2）改 3）删 4）查 输入和输出 名称 文件描述符 作用 stdin 0 标准输入 stdout 1 标准输出 stderr 2 错误输出 文件名 3+ 重定向的概念 命令返回值 输出重定向 重定向：改变标准输入、标准输出的方向的就是重定向 类型 操作符 用途 标准覆盖输出重定向 1&gt; 将命令的执行结果输出到指定的文件中，而不是直接显示在屏幕上 标准追加输出重定向 &gt;&gt; 将命令执行的结果追加输出到指定文件 错误覆盖输出重定向 2&gt; 将程序的错误结果输出到执行的文件中，会覆盖源文件内容 错误追加输出重 定向 2&gt;&gt; 将程序输出的错误结果以追加的方式输出到指定文件中，不会覆盖源文件 标准输入重定向 &lt;&lt; 将命令中接收输入的途径由默认的键盘更改为指定的文件 标准输出追加重定向 错误输出重定向 正确和错误都输出到相同位置 输出重定向 管道符 ：| 分流技术：tee xargs 将原本没有标准输入的命令，收到 xargs 的标准输入中， 在传递给后面的命令处理 LInux 中常见的压缩包类型 ***** 号常用 用法格式 使用工具 .zip zip 压缩工具 * .gz gzip 压缩工具，只能压缩文件，会删除源文件（通常配合 tar 使用） * .bz2 bzip2 压缩工具，只能压缩文件，会删除源文件（通常配合 tar 使用） .tar.gz 先使用 tar z 命令归档打包，然后使用 gzip 压缩 * .tzr.bz2 先使用 tar j 命令归档打包，然后使用 bzip 压缩 .tar.xz gzip zip tar RPM 全称 RPM Package Manager 缩写，由红帽开发用于 软件包的安装，升级卸载与查询 linux 中软件的安装方式 rpm 包的获取途径 rpm 安装的命令 查询 rpm 包升级 rpm 包卸载 光盘获取（挂载 / 卸载） 挂载 卸载 yum 的使用 换源 yum 包查找 yum 安装 / 更新 什么是进程？ 进程的概念又是什么？ 进程和程序的区别又是什么？ 进程的查看：ps ps -aux 显示信息详解 后台进程 后台被暂停的进程 进程管理 TOP top 信息解析 什么是中断？ top 命令的使用 什么是平均负载 平均负载多少时合理 负载过高怎么解决 进程信号的管理 常用的信号： 数字信号 信号别名 作用 1 HUP 挂起信号，往往可以让进程重新配置 2 INT 中断信号 类似 ctrl+c 3 QUIT 让进程退出 结果是让进程退出 9 KILL 直接结束进程，不能被进程捕获 15 TERM 进程终止。这是默认信号 18 CONT 被暂停的进程将恢复运行 放在后台运行 bg 19 STOP 暂停进程 20 TSTP 用户停止请求，类似 ctrl+z 把程序放置后台运行 centos6 开机启动流程： 启动流程 运行级别： 查看运行级别： Linux 关机命令： centos7 开机启动流程： 运行级别： systemctl 系统服务 启动服务 centos7 centos6 开机自启服务管理 crontab 配置文件详解 crontab 字段的意义： crontab 辅助字符 使用方法 系统的 crontab 配置文件 例题： 时间同步 安装 ntpdate 时间同步 编写时间同步定时 查看定时任务日志： 编写思路 拒绝某个用户使用定时任务： "},{"title":"三剑客","date":"2023-07-07T00:21:35.000Z","url":"/%5Bobject%20Object%5D/%E4%B8%89%E5%89%91%E5%AE%A2/","categories":[["undefined",""]],"content":"三剑客 grep 丶 awk 丶 sed 正则表达式 1.1 什么是正则表达式 匹配一些有规律的东西，比如手机号丶日志文件等 正则表达式 regular expression (RE) 正则使用：使用一些符号表达重复出现大小写，开头 / 结尾含义 1.2 应用场景 正则表达式 Linux 三剑客使用，或者一些开发语言 (python,golang…) 应用场景 过滤有规律的内容，尤其是日志 1.3 正则使用事项 所有的符号英文符号 学习正则，是通过 grep 命令学习 grep 加上单引号 如 grep ‘xxx’ 注意系统的字符集；en_US.UTF-8 , 如果字符集出现问题修改成 C ( export LANG=c ) 快速掌握正则：配合 grep -o 参数学习 1.4 正则符号 分类 命令 基础正则 ^ $ ^$ . * .* \\ grep/sed/awk 扩展正则 + | () {} ? egrep/sed-r/awk 1.5 正则 vs 通配符 分类 用途 支持的命令 正则 (RE) 三剑客，高级语言，进行过滤 三剑客 grep 丶 awk 丶 sed 丶 find 通配符 (pathname extenslon 或 glob) 匹配文件 (文件名)*.txt *.log Linux 下面的大部分命令 1.6 基础正则 1)^ 2)$ 3)^$ 4）. 5）\\ 转义字符 转义字符序列 (部分) \\n 表示回车换行 \\t 表示 tab 键 6）* 7）. 扩展 匹配以 s 开头到的任意结尾行 [root@hadoop100 ~]# grep ‘^s.*’ txt sdfsss. str. srtgrt sdadwaet 匹配以 s 开头 t 结尾的行，中间任意内容 [root@hadoop100 ~]# grep ‘^s.*t’ txt str. srtgrt sdadwaet 正则特色 正则表达式得到贪婪行，.* 表示所有或 * 连续出现的时候，会尽可能的过度匹配 [] 中括号 9）[^] 10）总结 基础正则 含义 搭配 ^ 以… 开头的行 $ 以… 结尾的行 ^$ 表示空行 搭配固定 . 任意一个字符 * 前一个字符连续出现 0 次或者 0 次以上 .* 表示所有内容 搭配 \\ 转义符字符，、\\n \\t 正则贪婪性 .* 的时候或者是连续出现 一般与 + 号搭配 [] 一个整体，匹配里面任意一个字符 [^] 取反，排除，也是一个整体 1.7 扩展正则 符号 + | （） {} ？ 1）+ 前一个字符出现 1 次或者 1 次以上 匹配出连续出现的数字 2）| 或者 符号 含义 应用场景 [] 1 次匹配一个字符 匹配单个字符 [] 和 + | 匹配 1 个字符或者多个字符 匹配单词的时候 3） （） 被括起来的内容，表示一个整体 反向引用（一般用于 sed） 被括起来的内容，表示一个整体 反向引用（一般用于 sed） {} 连续出现 o {n，m} 前一个字母 o 最少连续出现 n 次，最多出现 m 次 符号 o 前一个字母 o 最少连续出现 n 次，最多出现 m 次 o 前一个字母 o 连续出现 n 次 5） ？ 前一个字符出现 0 次或者 1 次 6） 扩展正则总结 符号 含义 搭配 + 前一个字符出现 1 次或者 1 次以上 []+ | 或者 [] 一个整体，sed 反向引用 {} 前一个字母 o 最少连续出现 n 次，最多出现 m 次 ? 前一个字符出现 0 次或者 1 次 2.1 三剑客 三剑客的特点及应用 命令 特点 应用 grep 过滤丶查找 grep 过滤的速度是最快的 sed 替换，修改文件内容丶取 行 如果要替换 / 修改文件内容，取出某个范围的值 awk 取列，统计计算 取列丶对比比较丶统计计算 grep 选项 含义 -E =egrep -A 例：-A5 匹配你要的内容显示下接来的 5 行 -B 例：-B5 匹配你要的内容显示接上面的 5 行 -C 例：-C 5 匹配你要的内容显示上下面的 5 行 -c 统计出现了多少次行，同 wc -l -v 取反丶排除 (行) -n 显示行号 -i 忽略大小写 -w 匹配单词 -o 精确过滤 sed 字符串替换 特点及格式 sed stram edior 流编辑器，sed 把处理的内容 (文件) 当作是水，源源不断的进行处理，直到文件末尾 sed 格式 命令 选项 (s）sed 命令功能 (g) 修饰符 sed -r ‘s#oldboy#oldgirl#g’ sed 命令核心功能 功能 s 替换 (substitute) sub P 显示 d delete cai 增加 3） sed 查找 选项： -n：按行号查找，搭配 p 使用 例：sed -n ‘5p’ jiujiu.txt 注：如果不加 - n，则原文输出并重复输出指定行一遍 - e 多重编辑，且命令顺序会影响结果 - f 指定一个 sed 脚本文件到命令行执行， -r Sed 使用扩展正则 - i 直接修改文档读取的内容，不在屏幕上输出 命令 效果 p 行号的意思 d 删除（不加 - 选项 ） 查找格式 ------------------ ------------------------------------------------------------ ‘2p’ 指定行号查找 ‘1,5p’ 指定行号范围查找 ‘/xxxx/p’ 类似于‘grep’过滤，// 里面可以写正则 例：sed -n ‘/^s/p’ jiujiu.txt ‘/10:00/,/11:00/p’ 表示范围的过滤，如果结尾范围输错，则从哪里开始查找输出到结尾 4）删除 d 删除格式 ‘2d’ 指定行号删除 ‘1,5d’ 指定行号范围删除 ‘/xxxx/’ 类似于‘grep’过滤，// 里面可以写正则 例：sed -n ‘/^s/d’ jiujiu.txt ‘/10:00/,/11:00/p’ 表示范围的过滤，如果结尾范围输错，则从哪里开始删除输出到结尾 注：d 是删除一行 常用：例 sed ‘5d’ jiujiu.txt 案例：删除文件中得到空行和包含 #的行 5）增加 ：cai 命令 含义 c （replace）替代 替换这行的内容 **a ** （append）追加 * 重点 向指定的行或每一行追加内容 （相当于 &gt;&gt;）【行的末尾追加】 i (insert) 插入 向指定的行或每一行插入内容 （行的前面插入） 例： 试题： 向 config 文件中追加多行内容 6) 替换：s 替换格式： 反向引用： 口诀：先保护，在使用 awk 1）awk 基本概念 awk 是一个按需求格式化文本再进行输出的工具。 awk 的工作流程图如图 工作原理： 逐行读取文本，默认以空格或 tab 键为分隔符进行分隔，将分隔所得的各个字段保存到内建变量中，并按模式或者条件执行编辑命令。 在使用 awk 命令的过程中，可以使用逻辑操作符 “&amp;&amp;” 表示 “与”、“||” 表示 “或”、“!” 表示 “非”；还可以进行简单的数学运算，如 +、-、*、/、%、^ 分别表示加、减、乘、除、取余和乘方。 2）语法 3）awk 结构 行与列 名词 awk 一些叫法 一些说明 行 记录 (record) 每一行默认通过回车分割的 列 字段 (field) 每一列默认通过空格分割的 awk 中行与列结束的标记都是可以修改的 内置变量 功能 -------- ------------------------------------------------------------ NF 当前处理的行的字段个数（就是：有多少列） NR 当前处理的行的行号（就是：有多少行）例：NR==1 [取出某一行] FNR 读取文件的记录数（行号），从 1 开始，新的文件重新从 1 开始计数 $0 当前处理的行的整行内容（就是：表示一行的内容） $n 当前处理行的第 n 个字段（就是：第 n 列） FILENAME 被处理的文件名 FS 指定每行的字段分隔符，默认为空格或制表位（相当于选项 -F ） OFS 输出字段的分隔符，默认也是空格 RS 行分割符。awk 从文件上读取资料时，将根据 Rs 的定义把资料切割成许多条记录，而 awk 一次仅读取一条记录，预设值是 “\\n“ ORS 输出分割符，默认也是换行符 1）取行 awk NR==1 取出某一行 NR&gt;=1&amp;&amp;（并且）NR&lt;=5 取出 1 到 5 行范围 常用符号 &gt; &lt;=&gt;= &lt;= == !=（不等于） /jiujiu/ //(双斜线搜索 / 过滤) /xx/，/xx/ 例：[root@hadoop102 ~]# awk ‘/1/,/4/’ like1hello ,world2like4linux 2）取列 在 awk 中取列首先要认识 - F -F：指定分隔符，指定每一列结束标记 (默认是空格 / 连续的空格 / 还有 tab 键) 数字：表示取出某一列注意：在awk中数字：表示取出某一列 注意：在awk中数字：表示取出某一列注意：在awk中内容一个意思，表示取出某一列 $0: 表示整行的内容 取列一般是 $NF: 表示取最后一列 小结 行与列的认知，[行：记录 列：字段 / 域] awk 取行与取列 awk 模式匹配 awk -F&quot;[ /]+&quot; ‘NR==2{print $2}’ 命令 选项 ‘条件 {动作}’ 比较符号：&lt;(小于) &gt;(大于) =（等于） &gt;=(大于等于) &lt;=(小于等于) !=(不等于) 正则： 范围： 表达式 ； 特殊条件：BEGIN 和 END 1）比较表达式 - 参考上面取行部分 2）正则： //(双划线) 支持扩展正则 awk 可以精确到某一列，某一列中包含 / 不包含… 内容 ~ ：包含 !~: 不包含 正则 awk 正则 ^ 表示… 开头 某一列的开头 $2~/^like/ : 第二列以 like 开头的 $ 表示… 结尾 某一列的结尾 2 /like2~/like2 /like/ : 第二列以 like 结尾的 ^$ 空行 某一列的空的 2~/^/ : 第二列空行的 3）表示范围 / 从哪里开始 /./ 哪里结束 / 常用 NR1，NR5 从第一行开始到第五行结束 类似于 sed -n ‘1,5p’ 4) 特殊模式 BEGIN {} 和 END {} 模式 含义 应用场景 BEGIN 里面的内容会在 awk 读取文件之前执行 1）进行简单的统计，计算，不涉及读取文件（常用）2）用来处理文件之前，添加个表头（了解）3) 用来定义 awk 变量（很少用，因为可以用 - v） END 里面的内容会在 awk 读取文件之后执行 1）awk 进行统计，一般是过程；先进行计算，最后 END 里面输出结果（常用）2）awk 使用数组，用来输出数组结果（常用） END {} 统计计算 统计方法： 统计方法 简写形式 应用场景 i++ i=i+1 计数型，统计次数 sum=sum+?? sum+=?? 求和，累加 注意：i sum 都是变量，可以随便写 array[]=array[]+1 array[]++ 数组分类计算 5）awk 数组 统计日志：类似于统计个每个 ip 出现的字数，统计每种状态码出现的次数 / 统计系统中每个用户被攻击的次数等等… 累加求和；统计每个 ip 消耗的流量 shell 数组 awk 数组 形式 array[0]=jiujiu array[1]=like array[0]=jiujiu array[1]=like 使用 echo $(array[0]) echo $(array[1]) print array[0] array[1] 批量输出数组内容 for i in $(array[*])do echo $i done for (i in array) print i print [i] awk 数组专用循环，变量获取到的是数组的下标，如果想要数组内容 用 a [i] 注释 1 练习题： 注意：使用 awk 统计日志，尽量精确匹配 6）for 循环 /if 判断 shell 编程 c 语言 for 循环 awk for 循环 for((i=1;i&lt;=10;i++))do echo '$i’down for(i=1;1&lt;=10;i++)print i awk for 循环用来循环每个字段 if 判断 shell if 判断 awk if 判断 if[“who” -eq 20 ];then echo ’成年人’fi if（条件） print &quot; 成年人” 常用 if[“who” -eq 20 ];then echo ’成年人’ else echo &quot; 未成年人 “ fi if（条件） print &quot; 成年人” else print &quot; 未成年人 “ 例子： 试题： 统计这段语句中，单词字符数小于 6 的单词 ，显示出来 Life is too short to spend time with people who suck the happiness out of you awk 函数 正则支持表 字符 说明 Basic RegEx Extended RegEx python RegEx Perl regEx 转义 \\ \\ \\ \\ ^ 匹配行首，例如’^dog’匹配以字符串 dog 开头的行（注意：awk 指令中，’^' 则是匹配字符串的开始） ^ ^ ^ ^ $ 匹配行尾，例如：’^、dog 匹配以字符串为结尾的行（注意：指令中，' 则是匹配字符串的结尾） $ $ $ $ ^$ 匹配空行 ^$ ^$ ^$ ^$ ^string$ 匹配行，例如：’^dog$' 匹配只含一个字符串 dog 的行 ^string$ ^string$ ^string$ ^string$ &lt; 匹配单词，例如：’&lt;frog’ （等价于’\\bfrog’），匹配以 frog 开头的单词 &lt; &lt; 不支持 不支持（但可以使用 \\b 来匹配单词，例如：’\\bfrog’） &gt; 匹配单词，例如：‘frog&gt;’（等价于’frog\\b '），匹配以 frog 结尾的单词 &gt; &gt; 不支持 不支持（但可以使用 \\b 来匹配单词，例如：‘frog\\b’） 匹配一个单词或者一个特定字符，例如：’’（等价于’\\bfrog\\b’）、’’ 不支持 不支持（但可以使用 \\b 来匹配单词，例如：’\\bfrog\\b’ () 匹配表达式，例如：不支持’（frog）’ 不支持（但可以使用，如：dogdog () () () 匹配表达式，例如：不支持’（frog）’ 不支持（同 ()) 不支持（同 ()) 不支持（同 ()) ？ 匹配前面的子表达式 0 次或 1 次（等价于 {0,1}），例如：where (is)? 能匹配 &quot;where&quot; 以及 &quot;whereis&quot; 不支持（同？) ？ ？ ？ ? 匹配前面的子表达式 0 次或 1 次（等价于’{0,1}’），例如：'whereisis? ' 能匹配 “where&quot;以及&quot;whereis” ? 不支持（同？) 不支持（同？) 不支持（同？) ? 当该字符紧跟在任何一个其他限制符（*, +, ?, {n},{n,}, {n,m}） 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，‘o+?’ 将匹配单个 &quot;o&quot;，而 ‘o+’ 将匹配所有 ‘o’ 不支持 不支持 不支持 不支持 . 匹配除换行符（’\\n’）之外的任意单个字符（注意：awk 指令中的句点能匹配换行符） . .（如果要匹配包括 “\\n” 在内的任何一个字符，请使用：’(^$)|（.） . .（如果要匹配包括 “\\n” 在内的任何一个字符，请使用：’ [.\\n] ’ * 匹配前面的子表达式 0 次或多次（等价于 {0,}），例如：zo* 能匹配 &quot;z&quot; 以及 “zoo” * * * * + 匹配前面的子表达式 1 次或多次（等价于’{1,}’），例如：'whereisis+ ' 能匹配 “whereis&quot;以及&quot;whereisis” + 不支持（同 +) 不支持（同 +) 不支持（同 +) + 匹配前面的子表达式 1 次或多次（等价于 {1,}），例如：zo + 能匹配 &quot;zo&quot; 以及 “zoo”，但不能匹配 “z” 不支持（同 +) + + + n 必须是一个 0 或者正整数，匹配子表达式 n 次，例如：zo {2} 能匹配 不支持（同 {n}) “zooz”，但不能匹配 &quot;Bob&quot;n 必须是一个 0 或者正整数，匹配子表达式大于等于 n 次，例如：go 不支持（同 {n,}) 能匹配 “good”，但不能匹配 godm 和 n 均为非负整数，其中 n &lt;= m，最少匹配 n 次且最多匹配 m 次 ，例如：o {1,3} 将配 &quot;fooooood&quot; 中的前三个 o（请注意在逗号和两个数之间不能有空格） 不支持（同 {n,m}) x|y 匹配 x 或 y，例如： 不支持’z|（food）’ 能匹配 “z” 或 &quot;food&quot;；’（z|f）ood’ 则匹配 &quot;zood&quot; 或 “food” 不支持（同 x|y) x|y x|y x|y [0-9] 匹配从 0 到 9 中的任意一个数字字符（注意：要写成递增） [0-9] [0-9] [0-9] [0-9] [xyz] 字符集合，匹配所包含的任意一个字符，例如：’[abc]' 可以匹配 &quot;lay&quot; 中的 ‘a’（注意：如果元字符，例如：. * 等，它们被放在 [ ] 中，那么它们将变成一个普通字符） [xyz] [xyz] [xyz] [xyz] [^xyz] 负值字符集合，匹配未包含的任意一个字符（注意：不包括换行符），例如：’[^abc]’ 可以匹配 “Lay” 中的’L’（注意：[^xyz] 在 awk 指令中则是匹配未包含的任意一个字符 + 换行符） [^xyz] [^xyz] [^xyz] [^xyz] [A-Za-z] 匹配大写字母或者小写字母中的任意一个字符（注意：要写成递增） [A-Za-z] [A-Za-z] [A-Za-z] [A-Za-z] [^A-Za-z] 匹配除了大写与小写字母之外的任意一个字符（注意：写成递增） [^A-Za-z] [^A-Za-z] [^A-Za-z] [^A-Za-z] \\d 匹配从 0 到 9 中的任意一个数字字符（等价于 [0-9]） 不支持 不支持 \\d \\d \\D 匹配非数字字符（等价于 [^0-9]） 不支持 不支持 \\D \\D \\S 匹配任何非空白字符（等价于 [^\\f\\n\\r\\t\\v]） 不支持 不支持 \\S \\S \\s 匹配任何空白字符，包括空格、制表符、换页符等等（等价于 [\\f\\n\\r\\t\\v]） 不支持 不支持 \\s \\s \\W 匹配任何非单词字符 (等价于 [^A-Za-z0-9_]) \\W \\W \\W \\W \\w 匹配包括下划线的任何单词字符（等价于 [A-Za-z0-9_]） \\w \\w \\w \\w \\B 匹配非单词边界，例如：‘er\\B’ 能匹配 “verb” 中的’er’，但不能匹配 &quot;never&quot; 中的’er’ \\B \\B \\B \\B \\b 匹配一个单词边界，也就是指单词和空格间的位置，例如： ‘er\\b’ 可以匹配 &quot;never&quot; 中的 ‘er’，但不能匹配 “verb” 中的’er’ \\b \\b \\b \\b \\t 匹配一个横向制表符（等价于 \\x09 和 \\cI） 不支持 不支持 \\t \\t \\v 匹配一个垂直制表符（等价于 \\x0b 和 \\cK） 不支持 不支持 \\v \\v \\n 匹配一个换行符（等价于 \\x0a 和 \\cJ） 不支持 不支持 \\n \\n \\f 匹配一个换页符（等价于 \\x0c 和 \\cL） 不支持 不支持 \\f \\f \\r 匹配一个回车符（等价于 \\x0d 和 \\cM） 不支持 不支持 \\r \\r \\ 匹配转义字符本身 &quot;&quot; \\ \\ \\ \\ \\cx 匹配由 x 指明的控制字符，例如：\\cM 匹配一个 Control-M 或回车符，x 的值必须为 A-Z 或 a-z 之一，否则，将 c 视为一个原义的 ‘c’ 字符 不支持 不支持 \\cx \\xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长，例如：’\\x41’ 匹配 “A”。’\\x041’ 则等价于’\\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码 不支持 不支持 \\xn \\num 匹配 num，其中 num 是一个正整数。表示对所获取的匹配的引用 不支持 \\num \\num [:alnum:] 匹配任何一个字母或数字（[A-Za-z0-9]），例如：’[[:alnum:]] ’ [:alnum:] [:alnum:] [:alnum:] [:alnum:] [:alpha:] 匹配任何一个字母（[A－Za－z]）， 例如：’ [[:alpha:]] ’ [:alpha:] [:alpha:] [:alpha:] [:alpha:] [:digit:] 匹配任何一个数字（[0-9]），例如：’[[:digit:]] ’ [:digit:] [:digit:] [:digit:] [:digit:] [:lower:] 匹配任何一个小写字母（[a-z]）， 例如：’ [[:lower:]] ’ [:lower:] [:lower:] [:lower:] [:lower:] [:upper:] 匹配任何一个大写字母（[A-Z]） [:upper:] [:upper:] [:upper:] [:upper:] [:space:] 任何一个空白字符： 支持制表符、空格，例如：’ [[:space:]] ’ [:space:] [:space:] [:space:] [:space:] [:blank:] 空格和制表符（横向和纵向），例如：’[[:blank:]]‘ó’[\\s\\t\\v]’ [:blank:] [:blank:] [:blank:] [:blank:] [:graph:] 任何一个可以看得见的且可以打印的字符（注意：不包括空格和换行符等），例如：’[[:graph:]] ’ [:graph:] [:graph:] [:graph:] [:graph:] [:print:] 任何一个可以打印的字符（注意：不包括：[:cntrl:]、字符串结束符’\\0’、EOF 文件结束符（-1）， 但包括空格符号），例如：’[[:print:]] ’ [:print:] [:print:] [:print:] [:print:] [:cntrl:] 任何一个控制字符（ASCII 字符集中的前 32 个字符，即：用十进制表示为从 0 到 31，例如：换行符、制表符等等），例如：’ [[:cntrl:]]’ [:cntrl:] [:cntrl:] [:cntrl:] [:cntrl:] [:punct:] 任何一个标点符号（不包括：[:alnum:]、[:cntrl:]、[:space:] 这些字符集） [:punct:] [:punct:] [:punct:] [:punct:] [:xdigit:] 任何一个十六进制数（即：0-9，a-f，A-F） [:xdigit:] [:xdigit:] [:xdigit:] [:xdigit:] "}]