[{"title":"三剑客","date":"2023-07-07T00:21:35.000Z","url":"/%5Bobject%20Object%5D/%E4%B8%89%E5%89%91%E5%AE%A2/","categories":[["undefined",""]],"content":"三剑客grep丶awk丶sed正则表达式 1.1 什么是正则表达式 匹配一些有规律的东西，比如手机号丶日志文件等 正则表达式regular expression (RE) 正则使用：使用一些符号表达重复出现大小写，开头&#x2F;结尾含义 1.2 应用场景 正则表达式 Linux三剑客使用，或者一些开发语言(python,golang…) 应用场景 过滤有规律的内容，尤其是日志 1.3 正则使用事项 所有的符号英文符号 学习正则，是通过grep命令学习 grep加上单引号 如 grep ‘xxx’ 注意系统的字符集;en_US.UTF-8 ,如果字符集出现问题修改成C(export LANG=c) 快速掌握正则：配合grep -o参数学习 1.4 正则符号 分类 命令 基础正则 ^ $ ^$ . * .* \\ grep&#x2F;sed&#x2F;awk 扩展正则 + | () {} ? egrep&#x2F;sed-r&#x2F;awk 1.5 正则vs通配符 分类 用途 支持的命令 正则(RE) 三剑客，高级语言，进行过滤 三剑客grep丶awk丶sed丶find 通配符(pathname extenslon 或glob) 匹配文件(文件名)*.txt *.log {1..10} Linux下面的大部分命令 1.6基础正则 1)^ 2)$ 3)^$ 4）. 5）\\转义字符 转义字符序列(部分) \\n 表示回车换行 \\t 表示tab键 6）* 7）. 扩展 匹配以s开头到的任意结尾行 [root@hadoop100 ~]# grep ‘^s.*’ txt sdfsss. str. srtgrt sdadwaet 匹配以s开头t结尾的行，中间任意内容 [root@hadoop100 ~]# grep ‘^s.*t’ txt str. srtgrt sdadwaet 正则特色 正则表达式得到贪婪行，.*表示所有或 *连续出现的时候，会尽可能的过度匹配 [] 中括号 9）[^] 10）总结 基础正则 含义 搭配 ^ 以….开头的行 $ 以….结尾的行 ^$ 表示空行 搭配固定 . 任意一个字符 * 前一个字符连续出现0次或者0次以上 .* 表示所有内容 搭配 \\ 转义符字符，、\\n \\t 正则贪婪性 .*的时候或者是连续出现 一般与+号搭配 [] 一个整体，匹配里面任意一个字符 [^] 取反，排除，也是一个整体 1.7扩展正则 符号 + | （） {} ？ 1）+ 前一个字符出现1次或者1次以上 匹配出连续出现的数字 2）| 或者 符号 含义 应用场景 [] 1次匹配一个字符 匹配单个字符[] 和+ | 匹配1个字符或者多个字符 匹配单词的时候 3） （） 被括起来的内容，表示一个整体 反向引用（一般用于sed） 被括起来的内容，表示一个整体 反向引用（一般用于sed） {} 连续出现 o{n，m} 前一个字母o最少连续出现n次，最多出现m次 符号 o{n，m} 前一个字母o最少连续出现n次，最多出现m次 o{n} 前一个字母o连续出现n次 5） ？ 前一个字符出现0次或者1次 6） 扩展正则总结 符号 含义 搭配 + 前一个字符出现1次或者1次以上 []+ | 或者 [] 一个整体，sed反向引用 {} 前一个字母o最少连续出现n次，最多出现m次 ? 前一个字符出现0次或者1次 2.1三剑客 三剑客的特点及应用 命令 特点 应用 grep 过滤丶查找 grep过滤的速度是最快的 sed 替换，修改文件内容丶取 行 如果要替换&#x2F;修改文件内容，取出某个范围的值 awk 取列，统计计算 取列丶对比比较丶统计计算 grep 选项 含义 -E &#x3D;egrep -A 例：-A5 匹配你要的内容显示下接来的5行 -B 例：-B5 匹配你要的内容显示接上面的5行 -C 例：-C 5 匹配你要的内容显示上下面的5行 -c 统计出现了多少次行，同wc -l -v 取反丶排除(行) -n 显示行号 -i 忽略大小写 -w 匹配单词 -o 精确过滤 sed 字符串替换 特点及格式 sed stram edior 流编辑器，sed把处理的内容(文件)当作是水，源源不断的进行处理，直到文件末尾 sed格式 命令 选项 (s）sed命令功能(g)修饰符 sed -r ‘s#oldboy#oldgirl#g’ sed命令核心功能 功能 s 替换(substitute) sub P 显示 d delete cai 增加 3） sed查找 选项： -n：按行号查找，搭配p使用 例：sed -n ‘5p’ jiujiu.txt 注：如果不加-n，则原文输出并重复输出指定行一遍-e 多重编辑，且命令顺序会影响结果-f 指定一个 sed 脚本文件到命令行执行，-r Sed 使用扩展正则-i 直接修改文档读取的内容，不在屏幕上输出 命令 效果 p 行号的意思 d 删除（不加-选项 ） 查找格式 ‘2p’ 指定行号查找 ‘1,5p’ 指定行号范围查找 ‘&#x2F;xxxx&#x2F;p’ 类似于‘grep’过滤，&#x2F;&#x2F;里面可以写正则 例：sed -n ‘&#x2F;^s&#x2F;p’ jiujiu.txt ‘&#x2F;10:00&#x2F;,&#x2F;11:00&#x2F;p’ 表示范围的过滤，如果结尾范围输错，则从哪里开始查找输出到结尾 4）删除 d 删除格式 ‘2d’ 指定行号删除 ‘1,5d’ 指定行号范围删除 ‘&#x2F;xxxx&#x2F;‘ 类似于‘grep’过滤，&#x2F;&#x2F;里面可以写正则 例：sed -n ‘&#x2F;^s&#x2F;d’ jiujiu.txt ‘&#x2F;10:00&#x2F;,&#x2F;11:00&#x2F;p’ 表示范围的过滤，如果结尾范围输错，则从哪里开始删除输出到结尾 注：d是删除一行 常用：例sed ‘5d’ jiujiu.txt 案例：删除文件中得到空行和包含#的行 5）增加 ：cai 命令 含义 c （replace）替代 替换这行的内容 **a ** （append）追加 *重点 向指定的行或每一行追加内容 （相当于&gt;&gt;）【行的末尾追加】 i (insert)插入 向指定的行或每一行插入内容 （行的前面插入） 例： 试题： 向config文件中追加多行内容 6)替换：s 替换格式： 反向引用： 口诀：先保护，在使用 awk 1）awk基本概念 awk 是一个按需求格式化文本再进行输出的工具。 awk 的工作流程图如图 工作原理： 逐行读取文本，默认以空格或tab键为分隔符进行分隔，将分隔所得的各个字段保存到内建变量中，并按模式或者条件执行编辑命令。 在使用awk命令的过程中,可以使用逻辑操作符“&amp;&amp;”表示“与”、“||”表示“或”、“!”表示“非”；还可以进行简单的数学运算，如+、-、*、&#x2F;、%、^分别表示加、减、乘、除、取余和乘方。 2）语法 3）awk结构 行与列 名词 awk一些叫法 一些说明 行 记录(record) 每一行默认通过回车分割的 列 字段(field) 每一列默认通过空格分割的 awk中行与列结束的标记都是可以修改的 内置变量 功能 NF 当前处理的行的字段个数（就是：有多少列） NR 当前处理的行的行号（就是：有多少行）例：NR&#x3D;&#x3D;1[取出某一行] FNR 读取文件的记录数（行号），从1开始，新的文件重新从1开始计数 $0 当前处理的行的整行内容（就是：表示一行的内容） $n 当前处理行的第n个字段（就是：第n列） FILENAME 被处理的文件名 FS 指定每行的字段分隔符，默认为空格或制表位（相当于选项 -F ） OFS 输出字段的分隔符，默认也是空格 RS 行分割符。awk从文件上读取资料时，将根据Rs的定义把资料切割成许多条记录，而awk一次仅读取一条记录，预设值是“\\n“ ORS 输出分割符，默认也是换行符 1）取行 awk NR&#x3D;&#x3D;1 取出某一行 NR&gt;&#x3D;1&amp;&amp;（并且）NR&lt;&#x3D;5 取出1到5行范围 常用符号 &gt; &lt; &#x3D; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; !&#x3D;（不等于） &#x2F;jiujiu&#x2F; &#x2F;&#x2F;(双斜线搜索&#x2F;过滤) &#x2F;xx&#x2F;，&#x2F;xx&#x2F; 例：[root@hadoop102 ~]# awk ‘&#x2F;1&#x2F;,&#x2F;4&#x2F;‘ like1hello ,world2like4linux 2）取列 在awk中取列首先要认识-F -F：指定分隔符，指定每一列结束标记(默认是空格&#x2F;连续的空格&#x2F;还有tab键) $数字：表示取出某一列 注意：在awk中$内容一个意思，表示取出某一列 $0:表示整行的内容 取列一般是{print xxx} $NF:表示取最后一列 小结 行与列的认知，[行：记录 列：字段&#x2F;域] awk取行与取列 awk模式匹配 awk -F”[ &#x2F;]+” ‘NR&#x3D;&#x3D;2{print $2}’ 命令 选项 ‘条件{动作}’ 比较符号：&lt;(小于) &gt;(大于) &#x3D;（等于） &gt;&#x3D;(大于等于) &lt;&#x3D;(小于等于) !&#x3D;(不等于) 正则： 范围： 表达式 ； 特殊条件：BEGIN和END 1）比较表达式-参考上面取行部分 2）正则： &#x2F;&#x2F;(双划线) 支持扩展正则 awk可以精确到某一列，某一列中包含&#x2F;不包含…….内容 ~ ：包含 !~:不包含 正则 awk正则 ^ 表示…..开头 某一列的开头 $2~&#x2F;^like&#x2F; :第二列以like开头的 $ 表示…..结尾 某一列的结尾 $2~&#x2F;like$&#x2F; :第二列以like结尾的 ^$ 空行 某一列的空的 $2~&#x2F;^$&#x2F; :第二列空行的 3）表示范围 &#x2F;从哪里开始&#x2F;.&#x2F;哪里结束&#x2F; 常用 NR&#x3D;&#x3D;1，NR&#x3D;&#x3D;5 从第一行开始到第五行结束 类似于sed -n ‘1,5p’ 4)特殊模式BEGIN{}和END{} 模式 含义 应用场景 BEGIN 里面的内容会在awk读取文件之前执行 1）进行简单的统计，计算，不涉及读取文件（常用）2）用来处理文件之前，添加个表头（了解）3)用来定义awk变量（很少用，因为可以用-v） END 里面的内容会在awk读取文件之后执行 1）awk进行统计，一般是过程；先进行计算，最后END里面输出结果（常用）2）awk使用数组，用来输出数组结果（常用） END{}统计计算 统计方法： 统计方法 简写形式 应用场景 i++ i&#x3D;i+1 计数型，统计次数 sum&#x3D;sum+?? sum+&#x3D;?? 求和，累加 注意：i sum 都是变量，可以随便写 array[]&#x3D;array[]+1 array[]++ 数组分类计算 5）awk数组 统计日志：类似于统计个每个ip出现的字数，统计每种状态码出现的次数&#x2F;统计系统中每个用户被攻击的次数等等… 累加求和;统计每个ip消耗的流量 shell数组 awk数组 形式 array[0]&#x3D;jiujiu array[1]&#x3D;like array[0]&#x3D;jiujiu array[1]&#x3D;like 使用 echo $(array[0]) echo $(array[1]) print array[0] array[1] 批量输出数组内容 for i in $(array[*])do echo $i done for (i in array) print i print [i] awk数组专用循环，变量获取到的是数组的下标，如果想要数组内容 用 a[i] 注释1 练习题： 注意：使用awk统计日志，尽量精确匹配 6）for循环&#x2F;if判断 shell编程c语言for循环 awk for循环 for((i&#x3D;1;i&lt;&#x3D;10;i++))do echo ‘$i’down for(i&#x3D;1;1&lt;&#x3D;10;i++)print i awk for循环用来循环每个字段 if判断 shell if 判断 awk if 判断 if[“who” -eq 20 ];then echo ’成年人’fi if（条件） print “成年人” 常用 if[“who” -eq 20 ];then echo ’成年人’ else echo “未成年人“ fi if（条件） print “成年人” else print “未成年人“ 例子： 试题： 统计这段语句中，单词字符数小于6的单词 ，显示出来 Life is too short to spend time with people who suck the happiness out of you awk函数 正则支持表 字符 说明 Basic RegEx Extended RegEx python RegEx Perl regEx 转义 \\ \\ \\ \\ ^ 匹配行首，例如’^dog’匹配以字符串dog开头的行（注意：awk 指令中，’^’则是匹配字符串的开始） ^ ^ ^ ^ $ 匹配行尾，例如：’^、dog匹配以字符串为结尾的行（注意：指令中，’则是匹配字符串的结尾） $ $ $ $ ^$ 匹配空行 ^$ ^$ ^$ ^$ ^string$ 匹配行，例如：’^dog$’匹配只含一个字符串 dog 的行 ^string$ ^string$ ^string$ ^string$ &lt; 匹配单词，例如：’&lt;frog’ （等价于’\\bfrog’），匹配以 frog 开头的单词 &lt; &lt; 不支持 不支持（但可以使用\\b来匹配单词，例如：’\\bfrog’） &gt; 匹配单词，例如：’frog&gt;’（等价于’frog\\b ‘），匹配以 frog 结尾的单词 &gt; &gt; 不支持 不支持（但可以使用\\b来匹配单词，例如：’frog\\b’） 匹配一个单词或者一个特定字符，例如：’‘（等价于’\\bfrog\\b’）、’‘ 不支持 不支持（但可以使用\\b来匹配单词，例如：’\\bfrog\\b’ () 匹配表达式，例如：不支持’（frog）’ 不支持（但可以使用，如：dogdog () () () 匹配表达式，例如：不支持’（frog）’ 不支持（同()) 不支持（同()) 不支持（同()) ？ 匹配前面的子表达式 0 次或 1 次（等价于{0,1}），例如：where(is)?能匹配”where” 以及”whereis” 不支持（同?) ？ ？ ？ ? 匹配前面的子表达式 0 次或 1 次（等价于’{0,1}’），例如：’whereisis? ‘能匹配 “where”以及”whereis” ? 不支持（同?) 不支持（同?) 不支持（同?) ? 当该字符紧跟在任何一个其他限制符（*, +, ?, {n},{n,}, {n,m}） 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个”o”，而 ‘o+’ 将匹配所有 ‘o’ 不支持 不支持 不支持 不支持 . 匹配除换行符（’\\n’）之外的任意单个字符（注意：awk 指令中的句点能匹配换行符） . .（如果要匹配包括“\\n”在内的任何一个字符，请使用：’(^$)|（.） . .（如果要匹配包括“\\n”在内的任何一个字符，请使用：’ [.\\n] ‘ * 匹配前面的子表达式 0 次或多次（等价于{0, }），例如：zo* 能匹配 “z”以及 “zoo” * * * * + 匹配前面的子表达式 1 次或多次（等价于’{1, }’），例如：’whereisis+ ‘能匹配 “whereis”以及”whereisis” + 不支持（同+) 不支持（同+) 不支持（同+) + 匹配前面的子表达式 1 次或多次（等价于{1, }），例如：zo+能匹配 “zo”以及 “zoo”，但不能匹配 “z” 不支持（同+) + + + {n} n 必须是一个 0 或者正整数，匹配子表达式 n 次，例如：zo{2}能匹配 不支持（同{n}) {n} {n} {n} {n,} “zooz”，但不能匹配 “Bob”n 必须是一个 0 或者正整数，匹配子表达式大于等于 n次，例如：go{2,} 不支持（同{n,}) {n,} {n,} {n,} {n,m} 能匹配 “good”，但不能匹配 godm 和 n 均为非负整数，其中 n &lt;&#x3D; m，最少匹配 n 次且最多匹配 m 次 ，例如：o{1,3}将配”fooooood” 中的前三个 o（请注意在逗号和两个数之间不能有空格） 不支持（同{n,m}) {n,m} {n,m} {n,m} x|y 匹配 x 或 y，例如： 不支持’z|（food）’ 能匹配 “z” 或”food”；’（z|f）ood’ 则匹配”zood” 或 “food” 不支持（同x|y) x|y x|y x|y [0-9] 匹配从 0 到 9 中的任意一个数字字符（注意：要写成递增） [0-9] [0-9] [0-9] [0-9] [xyz] 字符集合，匹配所包含的任意一个字符，例如：’[abc]’可以匹配”lay” 中的 ‘a’（注意：如果元字符，例如：. *等，它们被放在[ ]中，那么它们将变成一个普通字符） [xyz] [xyz] [xyz] [xyz] [^xyz] 负值字符集合，匹配未包含的任意一个字符（注意：不包括换行符），例如：’[^abc]’ 可以匹配 “Lay” 中的’L’（注意：[^xyz]在awk 指令中则是匹配未包含的任意一个字符+换行符） [^xyz] [^xyz] [^xyz] [^xyz] [A-Za-z] 匹配大写字母或者小写字母中的任意一个字符（注意：要写成递增） [A-Za-z] [A-Za-z] [A-Za-z] [A-Za-z] [^A-Za-z] 匹配除了大写与小写字母之外的任意一个字符（注意：写成递增） [^A-Za-z] [^A-Za-z] [^A-Za-z] [^A-Za-z] \\d 匹配从 0 到 9 中的任意一个数字字符（等价于 [0-9]） 不支持 不支持 \\d \\d \\D 匹配非数字字符（等价于 [^0-9]） 不支持 不支持 \\D \\D \\S 匹配任何非空白字符（等价于[^\\f\\n\\r\\t\\v]） 不支持 不支持 \\S \\S \\s 匹配任何空白字符，包括空格、制表符、换页符等等（等价于[ \\f\\n\\r\\t\\v]） 不支持 不支持 \\s \\s \\W 匹配任何非单词字符 (等价于[^A-Za-z0-9_]) \\W \\W \\W \\W \\w 匹配包括下划线的任何单词字符（等价于[A-Za-z0-9_]） \\w \\w \\w \\w \\B 匹配非单词边界，例如：’er\\B’ 能匹配 “verb” 中的’er’，但不能匹配”never” 中的’er’ \\B \\B \\B \\B \\b 匹配一个单词边界，也就是指单词和空格间的位置，例如： ‘er\\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的’er’ \\b \\b \\b \\b \\t 匹配一个横向制表符（等价于 \\x09和 \\cI） 不支持 不支持 \\t \\t \\v 匹配一个垂直制表符（等价于 \\x0b和 \\cK） 不支持 不支持 \\v \\v \\n 匹配一个换行符（等价于 \\x0a 和\\cJ） 不支持 不支持 \\n \\n \\f 匹配一个换页符（等价于\\x0c 和\\cL） 不支持 不支持 \\f \\f \\r 匹配一个回车符（等价于 \\x0d 和\\cM） 不支持 不支持 \\r \\r \\ 匹配转义字符本身”” \\ \\ \\ \\ \\cx 匹配由 x 指明的控制字符，例如：\\cM匹配一个Control-M 或回车符，x 的值必须为A-Z 或 a-z 之一，否则，将 c 视为一个原义的 ‘c’ 字符 不支持 不支持 \\cx \\xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长，例如：’\\x41’ 匹配 “A”。’\\x041’ 则等价于’\\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码 不支持 不支持 \\xn \\num 匹配 num，其中 num是一个正整数。表示对所获取的匹配的引用 不支持 \\num \\num [:alnum:] 匹配任何一个字母或数字（[A-Za-z0-9]），例如：’[[:alnum:]] ‘ [:alnum:] [:alnum:] [:alnum:] [:alnum:] [:alpha:] 匹配任何一个字母（[A－Za－z]）， 例如：’ [[:alpha:]] ‘ [:alpha:] [:alpha:] [:alpha:] [:alpha:] [:digit:] 匹配任何一个数字（[0-9]），例如：’[[:digit:]] ‘ [:digit:] [:digit:] [:digit:] [:digit:] [:lower:] 匹配任何一个小写字母（[a-z]）， 例如：’ [[:lower:]] ‘ [:lower:] [:lower:] [:lower:] [:lower:] [:upper:] 匹配任何一个大写字母（[A-Z]） [:upper:] [:upper:] [:upper:] [:upper:] [:space:] 任何一个空白字符： 支持制表符、空格，例如：’ [[:space:]] ‘ [:space:] [:space:] [:space:] [:space:] [:blank:] 空格和制表符（横向和纵向），例如：’[[:blank:]]’ó’[\\s\\t\\v]’ [:blank:] [:blank:] [:blank:] [:blank:] [:graph:] 任何一个可以看得见的且可以打印的字符（注意：不包括空格和换行符等），例如：’[[:graph:]] ‘ [:graph:] [:graph:] [:graph:] [:graph:] [:print:] 任何一个可以打印的字符（注意：不包括：[:cntrl:]、字符串结束符’\\0’、EOF 文件结束符（-1）， 但包括空格符号），例如：’[[:print:]] ‘ [:print:] [:print:] [:print:] [:print:] [:cntrl:] 任何一个控制字符（ASCII 字符集中的前 32 个字符，即：用十进制表示为从 0 到31，例如：换行符、制表符等等），例如：’ [[:cntrl:]]’ [:cntrl:] [:cntrl:] [:cntrl:] [:cntrl:] [:punct:] 任何一个标点符号（不包括：[:alnum:]、[:cntrl:]、[:space:]这些字符集） [:punct:] [:punct:] [:punct:] [:punct:] [:xdigit:] 任何一个十六进制数（即：0-9，a-f，A-F） [:xdigit:] [:xdigit:] [:xdigit:] [:xdigit:] "},{"title":"Hello World","date":"2023-07-05T10:12:13.519Z","url":"/%5Bobject%20Object%5D/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]